# DB configuration (e.g. jdbc:postgresql://<host>:<port>/<database>)
spring.datasource.url=${DB_URL}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}

# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto=validate

# Hibernate disable createClob() as it is not implemented yet in the driver
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

# hikari connection pool size management
spring.datasource.hikari.minimum-idle=${DB_POOL_SIZE_MIN:1}
spring.datasource.hikari.maximum-pool-size=${DB_POOL_SIZE_MAX:8}
spring.datasource.hikari.idle-timeout=${DB_POOL_IDLE_TIMEOUT_MS:120000}

# Send dates as timestamp
spring.jackson.serialization.write-dates-as-timestamps=true

# JWT token expiration time in milliseconds
security.jwt.token.expire-length=${JWT_EXPIRE_LENGTH:31536000000}

# password reset JWT token expiration time in milliseconds
security.jwt.token.password-reset-expire-length=600000

# The secret the JWT tokens are signed with
security.jwt.token.secret=${JWT_SECRET}

# Enable multipart uploads
spring.servlet.multipart.enabled=true

# Threshold after which files are written to disk.
spring.servlet.multipart.file-size-threshold=2KB

# Max file size.
spring.servlet.multipart.max-file-size=10MB
spring.http.multipart.max-file-size=10MB

# Max Request Size
spring.servlet.multipart.max-request-size=12MB
spring.http.multipart.max-request-size=12MB

# All files uploaded through the REST API will be stored in this directory
file.upload-dir=${UPLOAD_DIR}

# CORS origins
it.bz.beacon.allowedOrigins=${CORS_ORIGINS}

# Kontakt.IO properties to get additional beacon information
kontakt.io.apiUrl=https://api.kontakt.io
kontakt.io.acceptHeader=application/vnd.com.kontakt+json;version=10

# API INFORMATION shown inside swagger
api.info.host=${INFO_HOST}
api.info.title=${INFO_TITLE}
api.info.description=${INFO_DESCRIPTION}
api.info.version=${INFO_VERSION}
api.info.termsOfServiceUrl=${INFO_TERMS_OF_SERVICE_URL}
api.info.contactName=${INFO_CONTACT_NAME}
api.info.contactUrl=${INFO_CONTACT_URL}
api.info.contactEmail=${INFO_CONTACT_EMAIL}
api.info.license=${INFO_LICENSE}
api.info.licenseUrl=${INFO_LICENSE_URL}

# Email address were new issue notifications will be send to
it.bz.beacon.issueEmailFrom=${ISSUE_EMAIL_FROM}
it.bz.beacon.issueEmailTo=${ISSUE_EMAIL_TO}

# Email address were the password reset token should be send from
it.bz.beacon.passwordResetEmailFrom=${BEACON_PASSWORD_RESET_URL}

# Password reset URL
it.bz.beacon.passwordResetURL=${BEACON_PASSWORD_RESET_MAIL}

#### Email sending configuration
spring.mail.host=${MAIL_HOST}
spring.mail.port=${MAIL_PORT}
spring.mail.username=${MAIL_USERNAME}
spring.mail.password=${MAIL_PASSWORD}
spring.mail.properties.mail.smtp.auth=${MAIL_SMTP_AUTH}
spring.mail.properties.mail.smtp.starttls.enable=${MAIL_SMTP_STARTTLS}
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=3000
spring.mail.properties.mail.smtp.writetimeout=5000

#### Trusted API to update battery status from each authorized application
#
# The username for the basic authorization for the trusted api
# The password is bcrypted. To generate a new one, use the webapp and create an 
#     account with a password, and then copy the bcrypt hash from the database table
it.bz.beacon.trusted.user=${BEACON_TRUSTED_USERNAME}
it.bz.beacon.trusted.password=${BEACON_TRUSTED_PASSWORD}

#### Server side compression
server.compression.enabled=true
server.compression.mime-types=text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json
server.compression.min-response-size=1024
